name: Production Deployment Pipeline with Square Payment Integration

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.6'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SQUARE_WEBHOOK_SIGNATURE_KEY: ${{ secrets.SQUARE_WEBHOOK_SIGNATURE_KEY }}
  DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  test-and-quality:
    name: Test & Quality Assurance with Square Integration
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones disabled for better Sonar analysis

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for dependency vulnerabilities
        run: pnpm audit --audit-level=high
        continue-on-error: true

      - name: Run type checking
        run: pnpm run --recursive type-check

      - name: Run linting
        run: pnpm run lint
        continue-on-error: true

      - name: Run unit tests with coverage
        run: pnpm run --recursive test:coverage --if-present
        env:
          CI: true

      - name: Run Square payment integration tests
        run: |
          pnpm --filter @founders-day/frontend test:square --if-present
          pnpm --filter @founders-day/frontend test:integration --if-present
        env:
          CI: true
          SQUARE_APPLICATION_ID: ${{ secrets.SQUARE_APPLICATION_ID_SANDBOX }}
          SQUARE_ACCESS_TOKEN: ${{ secrets.SQUARE_ACCESS_TOKEN_SANDBOX }}
          SQUARE_ENVIRONMENT: sandbox

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Upload Square test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: square-test-results-${{ github.sha }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  security-scan:
    name: Security Analysis with PCI DSS Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: PCI DSS Compliance Scan
        run: |
          echo "🔒 Running PCI DSS compliance checks..."
          # Check for sensitive data exposure
          if grep -r "sk_" --include="*.ts" --include="*.js" --include="*.tsx" .; then
            echo "❌ Found potential Square API key exposure"
            exit 1
          fi
          
          # Check for webhook signature validation
          if ! grep -r "verifyWebhookSignature" --include="*.ts" --include="*.js" .; then
            echo "⚠️ Webhook signature validation not found"
          fi
          
          # Check for HTTPS enforcement
          if ! grep -r "https://" next.config.js; then
            echo "⚠️ HTTPS enforcement not detected in config"
          fi
          
          echo "✅ PCI DSS compliance checks completed"

      - name: Square API Security Validation
        run: |
          echo "🔐 Validating Square API security implementation..."
          
          # Check for proper environment variable usage
          if grep -r "SQUARE.*=" --include="*.ts" --include="*.js" --exclude-dir=node_modules .; then
            echo "⚠️ Found hardcoded Square configuration (should use env vars)"
          fi
          
          # Verify webhook endpoint security
          if [ -f "apps/frontend/app/api/webhooks/square/route.ts" ]; then
            if grep -q "verifySignature" apps/frontend/app/api/webhooks/square/route.ts; then
              echo "✅ Webhook signature verification implemented"
            else
              echo "❌ Webhook signature verification missing"
              exit 1
            fi
          fi
          
          echo "✅ Square API security validation completed"

      - name: Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results-${{ github.sha }}
          path: |
            .sarif/
            security-report.json
          retention-days: 30

  build-and-validate:
    name: Build & Performance Validation
    runs-on: ubuntu-latest
    needs: [test-and-quality, security-scan]
    timeout-minutes: 20
    
    steps:
      - name: Checkout code  
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run --recursive build
        env:
          NEXT_PUBLIC_ADMIN_API_URL: ${{ secrets.ADMIN_API_URL }}
          NEXT_PUBLIC_SQUARE_APPLICATION_ID: ${{ secrets.SQUARE_APPLICATION_ID }}
          NEXT_PUBLIC_SQUARE_LOCATION_ID: ${{ secrets.SQUARE_LOCATION_ID }}
          NEXT_PUBLIC_SQUARE_ENVIRONMENT: ${{ secrets.SQUARE_ENVIRONMENT }}
          NEXT_TELEMETRY_DISABLED: 1

      - name: Analyze bundle size
        run: |
          npx next-bundle-analyzer --json > bundle-stats.json
          echo "Bundle analysis complete"
        continue-on-error: true

      - name: Bundle size report
        uses: andresz1/size-limit-action@v1
        continue-on-error: true
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            apps/frontend/.next/
            apps/frontend/public/
            apps/admin/.next/
            apps/admin/public/
            package.json
            pnpm-lock.yaml
            pnpm-workspace.yaml
          retention-days: 3

  e2e-testing:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    needs: [build-and-validate]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium firefox webkit

      - name: Start application
        run: |
          pnpm --filter @founders-day/frontend start &
          npx wait-on http://localhost:3000 --timeout 60000
        env:
          PORT: 3000

      - name: Run E2E tests
        run: pnpm --filter @founders-day/frontend test:e2e --if-present
        env:
          CI: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ github.sha }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  lighthouse-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    needs: [build-and-validate]
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Start application
        run: |
          pnpm --filter @founders-day/frontend start &
          npx wait-on http://localhost:3000 --timeout 60000
        env:
          PORT: 3000

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/register
            http://localhost:3000/volunteer
            http://localhost:3000/about
            http://localhost:3000/schedule
          uploadArtifacts: true
          temporaryPublicStorage: true
          budgetPath: '.lighthouserc.json'

  docker-build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs: [test-and-quality, security-scan]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_ADMIN_API_URL=${{ secrets.ADMIN_API_URL }}
            NEXT_PUBLIC_SQUARE_APPLICATION_ID=${{ secrets.SQUARE_APPLICATION_ID }}
            NEXT_PUBLIC_SQUARE_LOCATION_ID=${{ secrets.SQUARE_LOCATION_ID }}
            NEXT_PUBLIC_SQUARE_ENVIRONMENT=production

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, lighthouse-audit]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.foundersday.mn
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Vercel CLI
        run: pnpm add -g vercel@latest

      - name: Pull Vercel Environment Information
        run: |
          cd apps/frontend
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts  
        run: |
          cd apps/frontend
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NEXT_PUBLIC_ADMIN_API_URL: ${{ secrets.ADMIN_API_URL_STAGING }}
          NEXT_PUBLIC_SQUARE_APPLICATION_ID: ${{ secrets.SQUARE_APPLICATION_ID }}
          NEXT_PUBLIC_SQUARE_LOCATION_ID: ${{ secrets.SQUARE_LOCATION_ID }}
          NEXT_PUBLIC_SQUARE_ENVIRONMENT: sandbox

      - name: Deploy to Staging
        id: deploy-staging
        run: |
          cd apps/frontend
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Staging deployed to: $DEPLOYMENT_URL"

      - name: Run staging smoke tests
        run: |
          npx wait-on ${{ steps.deploy-staging.outputs.deployment-url }} --timeout 60000
          curl -f ${{ steps.deploy-staging.outputs.deployment-url }} || exit 1
          echo "Staging health check passed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, e2e-testing]
    if: github.ref == 'refs/heads/main' && success()
    environment:
      name: production
      url: https://foundersday.mn
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Vercel CLI
        run: pnpm add -g vercel@latest

      - name: Pull Vercel Environment Information
        run: |
          cd apps/frontend
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: |
          cd apps/frontend
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NEXT_PUBLIC_ADMIN_API_URL: ${{ secrets.ADMIN_API_URL_PRODUCTION }}
          NEXT_PUBLIC_SQUARE_APPLICATION_ID: ${{ secrets.SQUARE_APPLICATION_ID }}
          NEXT_PUBLIC_SQUARE_LOCATION_ID: ${{ secrets.SQUARE_LOCATION_ID }}
          NEXT_PUBLIC_SQUARE_ENVIRONMENT: production

      - name: Deploy to Production
        id: deploy-production
        run: |
          cd apps/frontend
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Production deployed to: $DEPLOYMENT_URL"

      - name: Production health check
        run: |
          npx wait-on ${{ steps.deploy-production.outputs.deployment-url }} --timeout 60000
          curl -f ${{ steps.deploy-production.outputs.deployment-url }} || exit 1
          curl -f ${{ steps.deploy-production.outputs.deployment-url }}/api/health || exit 1
          echo "Production health check passed"

      - name: Update deployment status
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: success
          deployment-id: ${{ steps.deploy-production.outputs.deployment-id }}
          environment-url: ${{ steps.deploy-production.outputs.deployment-url }}

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && (github.ref == 'refs/heads/main')
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.deploy-production.result }}
          channel: '#deployments'
          text: |
            🚀 Founders Day Frontend Deployment ${{ needs.deploy-production.result }}
            
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            Production URL: https://foundersday.mn
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

      - name: Create GitHub Release
        uses: actions/create-release@v1
        if: needs.deploy-production.result == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            🎉 **Production Deployment Successful**
            
            **Changes in this release:**
            - Deployed commit: ${{ github.sha }}
            - Pipeline run: ${{ github.run_id }}
            
            **Deployment Details:**
            - Production URL: https://foundersday.mn
            - Staging URL: https://staging.foundersday.mn
            
            **Quality Metrics:**
            - All tests passed ✅
            - Security scans completed ✅
            - Performance audit completed ✅
            
            View full deployment logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          draft: false
          prerelease: false