/**
 * API Mock Handlers for BDD Tests
 * Using MSW (Mock Service Worker) for intercepting API calls
 */

import { rest } from 'msw';
import { setupServer } from 'msw/node';

// Test data fixtures
export const testUsers = {
  validUser: {
    id: '1',
    email: 'test@example.com',
    username: 'testuser',
    name: 'Test User',
    profileComplete: true
  },
  newUser: {
    email: 'newuser@example.com',
    username: 'newuser',
    password: 'password123'
  }
};

export const testProfiles = {
  completeProfile: {
    id: '1',
    userId: '1',
    name: 'Test User',
    bio: 'Test bio',
    avatar: '/images/avatar.png',
    skills: ['JavaScript', 'React', 'Node.js'],
    interests: ['Web Development', 'Open Source']
  }
};

// API endpoint handlers
export const handlers = [
  // Authentication endpoints
  rest.post('/api/auth/login', (req, res, ctx) => {
    const { email, password } = req.body as any;
    
    if (email === 'test@example.com' && password === 'password123') {
      return res(
        ctx.status(200),
        ctx.json({
          user: testUsers.validUser,
          token: 'mock-jwt-token'
        })
      );
    }
    
    return res(
      ctx.status(401),
      ctx.json({ error: 'Invalid credentials' })
    );
  }),

  rest.post('/api/auth/register', (req, res, ctx) => {
    const { email, username, password } = req.body as any;
    
    // Simulate validation
    if (!email || !username || !password) {
      return res(
        ctx.status(400),
        ctx.json({ error: 'All fields are required' })
      );
    }
    
    // Simulate successful registration
    return res(
      ctx.status(201),
      ctx.json({
        user: {
          id: '2',
          email,
          username,
          name: username,
          profileComplete: false
        },
        token: 'mock-jwt-token-new'
      })
    );
  }),

  rest.post('/api/auth/logout', (req, res, ctx) => {
    return res(
      ctx.status(200),
      ctx.json({ message: 'Logged out successfully' })
    );
  }),

  // User profile endpoints
  rest.get('/api/users/:userId', (req, res, ctx) => {
    const { userId } = req.params;
    
    if (userId === '1') {
      return res(
        ctx.status(200),
        ctx.json(testUsers.validUser)
      );
    }
    
    return res(
      ctx.status(404),
      ctx.json({ error: 'User not found' })
    );
  }),

  rest.get('/api/profiles/:userId', (req, res, ctx) => {
    const { userId } = req.params;
    
    if (userId === '1') {
      return res(
        ctx.status(200),
        ctx.json(testProfiles.completeProfile)
      );
    }
    
    return res(
      ctx.status(404),
      ctx.json({ error: 'Profile not found' })
    );
  }),

  rest.put('/api/profiles/:userId', (req, res, ctx) => {
    const { userId } = req.params;
    const updates = req.body as any;
    
    if (userId === '1') {
      return res(
        ctx.status(200),
        ctx.json({
          ...testProfiles.completeProfile,
          ...updates
        })
      );
    }
    
    return res(
      ctx.status(404),
      ctx.json({ error: 'Profile not found' })
    );
  }),

  // Search endpoints
  rest.get('/api/search', (req, res, ctx) => {
    const query = req.url.searchParams.get('q');
    
    if (!query) {
      return res(
        ctx.status(400),
        ctx.json({ error: 'Query parameter required' })
      );
    }
    
    // Mock search results
    const results = [
      {
        id: '1',
        type: 'user',
        title: 'Test User',
        description: 'Matching user profile',
        url: '/users/1'
      },
      {
        id: '2',
        type: 'content',
        title: 'Test Content',
        description: 'Matching content item',
        url: '/content/2'
      }
    ];
    
    return res(
      ctx.status(200),
      ctx.json({
        query,
        results,
        total: results.length
      })
    );
  }),

  // Health check endpoint
  rest.get('/api/health', (req, res, ctx) => {
    return res(
      ctx.status(200),
      ctx.json({ status: 'ok', timestamp: new Date().toISOString() })
    );
  })
];

// Create and export the mock server
export const mockServer = setupServer(...handlers);

// Helper functions for test scenarios
export const mockAuthenticatedUser = () => {
  // Set up localStorage or cookies as needed
  if (typeof window !== 'undefined') {
    window.localStorage.setItem('auth_token', 'mock-jwt-token');
    window.localStorage.setItem('user', JSON.stringify(testUsers.validUser));
  }
};

export const mockUnauthenticatedUser = () => {
  if (typeof window !== 'undefined') {
    window.localStorage.removeItem('auth_token');
    window.localStorage.removeItem('user');
  }
};

// Test-specific server controls
export const startMockServer = () => {
  mockServer.listen({ onUnhandledRequest: 'bypass' });
};

export const stopMockServer = () => {
  mockServer.close();
};

export const resetMockServer = () => {
  mockServer.resetHandlers();
};